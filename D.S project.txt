#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<dos.h>
typedef struct node
{
 int data;
 struct node *next,*prev;
}node;
node *head;
//printing the data
void printing()
{
  node *p;
  p=head;
  delay(800);
  printf("Getting the data\n");
  delay(800);
  printf("printing the data\n");
  while(p!=NULL)
  {
    delay(1200);
    printf("%d->",p->data);
    p=p->next;
  }
}
//counting data
void counting()
{
  int c=0;
  node *p;
  p=head;
  while(p!=NULL)
  {
   c++;
   p=p->next;
  }
 printf("counting the number of nodes.......");
 delay(1400);
 {
 clrscr();
 printf("\nnumber of nodes are %d",c);
 }
}
//searching the node
void searching()
{
  int x,i=0,c=0;
  node *p;
  p=head;
  printf("Enter the data to be search\n");
  scanf("%d",&x);
  printf("\nsearching the element...");
  delay(1200);
  while(p!=NULL)
  {
    i++;
    if(x==p->data)
    {
    printf("\n%d data found at %d index",x,i);
    c=1;
    }
    p=p->next;
  }
  if(c==0)
  {
   printf("\n%d is not present in the list",x);
  }
}
//INSERTION AT THE BEGINNING
void insertion_at_the_beginning()
{
  node *n;
  n=(node*) malloc(sizeof(node));
  printf("Enter the data\n");
  scanf("%d",&n->data);
  n->next=NULL;
  n->prev=NULL;
  n->next=head;
  head->prev=n;
  head=n;
  printf("Inserting the data to list\n");
  delay(1700);
  printf("Data inserted successfully");
}
//INSERTION AT LAST
void insertion_at_last()
{
 node *p,*n;
 n=(node*)malloc(sizeof(node));
 printf("Enter the data\n");
 scanf("%d",&n->data);
 n->next=NULL;
 n->prev=NULL;
 p=head;
 while(p->next!=NULL)
 {
   p=p->next;
 }
p->next=n;
n->prev=p;
printf("Inserting the data to list\n");
  delay(1700);
  printf("Data inserted successfully");
}
//INSERTION AT ANY PO9STION
void insertion_at_any_position()
{
  int pos,i;
  node *n,*p,*q;
  n=(node*)malloc(sizeof(node));
  printf("Enter the data\n");
  scanf("%d",&n->data);
  n->next=NULL;
  n->prev=NULL;
  printf("Enter the position where the node is to be inserted\n");
  scanf("%d",&pos);
  if(pos==1)
  {
  n->next=head;
  head->prev=n;
  head=n;
  }
  else
  {
  p=head;
  for(i=1;i<(pos-1);i++)
  p=p->next;
  q=p->next;
 n->next=q;
 n->prev=p;
 q->prev=n;
 p->next=n;
 }
 printf("Inserting the data %d to list\n",n->data);
  delay(1700);
  printf("Data %d inserted successfully",n->data);
}
//DELETION AT FRONT
void deletion_at_front()
{
 node *p;
 int x;
 p=head;
 head=head->next;
 head->prev=NULL;
 x=p->data;
 free(p);
 printf("Deleting the data %d from list\n",x);
  delay(1700);
  printf("Data %d deleted successfully",x);
}
//VOID DELETION AT THE LAST
void deletion_at_last()
{
  int i,pos;
  int x;
  node *p,*q;
  p=head;
  while(p->next!=NULL)
  {
   p=p->next;
  }
  q=p->prev;
  q->next=NULL;
  x=p->data;
  free(p);
  printf("Deleting the data %d from list\n",x);
  delay(1700);
  printf("Data %d deleted successfully",x);
}
//VOID DELETION_AT_ANY_POSITION
void deletion_at_any_position()
{
  node *p,*q;
  int pos,i,x=0;
  printf("Enter the position to be deleted");
  scanf("%d",&pos);
  if(pos==1)
  {
  p=head;
  head=head->next;
  head->prev=NULL;
  x=p->data;
  free(p);
  }
  p=head;
  for(i=1;i<(pos-1);i++)
  {
    p=p->next;
  }
  q=p->next;
  p->next=q->next;
  q->next->prev=p;
   x=q->data;
  free(q);
  printf("Deleting the data %d from list\n",x);
  delay(1700);
  printf("Data %d deleted successfully",x);
 }
void main()
 {
   int n,i,ch;
   node *p;
   clrscr();
   printf("Enter the number of node\n");
   scanf("%d",&n);

   head=(node*)malloc(sizeof(node));
   printf("Enter the data inside the node");
   scanf("%d",&head->data);
   head->next=NULL;
   p=head;
   for(i=1;i<n;i++)
   {
     p->next=(node*)malloc(sizeof(node));
     p=p->next;
     printf("Enter the dat inside the node");
     scanf("%d",&p->data);
     p->next=NULL;
   }
   textcolor(RED);
   cprintf("Data saving to memory");
   delay(1500);
   {
   while(1)
   {
     printf("\nEnter your choice\n1:printing\n2:counting\n3:searching\n4:insertion_at_beginning\n5:insertion_at_last\n6:insertion_at_any_position\n7:deletion_at_begining\n8:deletion_at_last\n9:deletion_at_any_position\n10:exit\n");
     scanf("%d",&ch);
     switch(ch)
     {
       case 1:
	      printing();
	      break;
       case 2:
	       counting();
	       break;
      case 3:
	       searching();
	       break;
       case 4:
	      insertion_at_the_beginning();

	       break;

      case 5:
	      insertion_at_last();
	      break;
      case 6:
	      insertion_at_any_position();
	      break;
      case 7:
	       deletion_at_front();
	       break;
      case 8:
	       deletion_at_last();
	       break;
      case 9:
	       deletion_at_any_position();
	       break;
      case 10:
		exit(1);
		break;
      default:
	       printf("Enter correct choice\n");
      }
    }
  }
 }